package com.carp.sqs;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.awspring.cloud.sqs.operations.SqsTemplate;
import org.slf4j.Logger;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;
import software.amazon.awssdk.services.sqs.SqsAsyncClient;

import java.util.Map;
import java.util.Random;

@Component
class SqsMessagePublisher implements CommandLineRunner {

    private static final Logger LOG = org.slf4j.LoggerFactory.getLogger(SqsMessagePublisher.class);

    private final SqsTemplate sqsTemplate;
    private final SqsAsyncClient sqsClient;
    private final ObjectMapper objectMapper;
    private final Random randomService;

    SqsMessagePublisher(SqsAsyncClient sqsAsyncClient) {
        this.sqsClient = sqsAsyncClient;
        sqsTemplate = SqsTemplate.newTemplate(sqsAsyncClient);
        objectMapper = new ObjectMapper();
        randomService = new Random();
    }

    @Override
    public void run(String... args) {
        sqsClient.createQueue(builder -> builder.queueName("customer"));

        // traceId and spanId are generated with this length to match the length of the traceId and spanId generated by the micrometer tracing library
        String traceId = buildRandomHex(32);
        String spanId = buildRandomHex(16);

        LOG.info("send: {} {}", traceId, spanId);

        Map<String, Object> headers = Map.of("traceId", traceId, "spanId", spanId);
        String message = buildCustomerMessage(new Customer(3, "Jack"));

        sqsTemplate.send(to -> to.queue("customer").payload(message).headers(headers));
    }

    private String buildCustomerMessage(Customer customer) {
        try {
            return objectMapper.writeValueAsString(customer);
        } catch (JsonProcessingException ex) {
            throw new IllegalArgumentException(ex);
        }
    }

    private String buildRandomHex(int randomHexLength) {
        StringBuilder sb = new StringBuilder();
        while (sb.length() < randomHexLength) {
            sb.append(Integer.toHexString(randomService.nextInt()));
        }
        sb.setLength(randomHexLength);
        return sb.toString();
    }
}
